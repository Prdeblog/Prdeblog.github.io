<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/posts/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>基于光流法视频测流思路</title>
    <url>/posts/46795.html</url>
    <content><![CDATA[<p>光流法是一种常用的方法来测量河流的流速。它基于计算机视觉中的光流算法，通过分析连续帧之间的像素位移来估计物体的运动。在河流中，利用光流法来追踪水流中的特征点（如浮标或漂浮物）并计算流速。</p>
<p>基于光流法测量河流流速的一般步骤：</p>
<ol>
<li><p>获取视频数据：使用一个或多个摄像机拍摄河流的视频。确保摄像机稳定且视频质量良好。</p>
</li>
<li><p>特征点提取：从视频帧中提取特征点。可以使用一些特征点检测算法，如Harris角点检测、SIFT（尺度不变特征变换）或SURF（加速稳健特征）等。特征点应该具有在连续帧之间稳定的纹理特征。</p>
</li>
<li><p>光流计算：使用光流算法（如Lucas-Kanade、Horn-Schunck或Farneback算法）计算特征点在连续帧之间的位移向量。这些算法基于像素间的亮度变化来估计光流向量。</p>
</li>
<li><p>筛选和跟踪：根据一些筛选条件（如像素位移的大小、相邻特征点的一致性等），筛选出可靠的光流向量，并跟踪这些特征点在连续帧中的位置。</p>
</li>
<li><p>流速计算：根据跟踪的特征点在时间间隔内的位移，结合摄像机的参数和距离标定，可以计算出水流的流速。通过将位移向量转换为实际的距离，并除以时间间隔，可以得到平均流速或瞬时流速。</p>
</li>
</ol>
<p>结合其他方法和技术来改进光流法的结果，如结构光投影、多摄像机系统、图像配准等。</p>
]]></content>
      <categories>
        <category>学术研究</category>
      </categories>
      <tags>
        <tag>视频测流</tag>
      </tags>
  </entry>
  <entry>
    <title>django开发模板</title>
    <url>/posts/46794.html</url>
    <content><![CDATA[<h3 id="django开发"><a href="#django开发" class="headerlink" title="django开发"></a>django开发</h3><h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt</span><br><span class="line"></span><br><span class="line">path(<span class="string">&#x27;api/xxx/xxx&#x27;</span>,csrf_exempt(xxxView.as_view()))</span><br></pre></td></tr></table></figure>

<h4 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> xxx</span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"><span class="comment">#导入需要管理的数据库表</span></span><br><span class="line">admin.site.site_header = <span class="string">&#x27;xxx管理后台&#x27;</span>  <span class="comment"># 设置header</span></span><br><span class="line">admin.site.site_title = <span class="string">&#x27;xxx管理后台&#x27;</span>  <span class="comment"># 设置title</span></span><br><span class="line">admin.site.index_title = <span class="string">&#x27;xxx管理后台&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(<span class="params">xxx</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">xxxAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    list_display = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>,,<span class="string">&#x27;created_time&#x27;</span>)</span><br><span class="line">    <span class="comment"># 文章列表里显示想要显示的字段</span></span><br><span class="line">    list_per_page = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 满50条数据就自动分页</span></span><br><span class="line">    ordering = (<span class="string">&#x27;-created_time&#x27;</span>,)</span><br><span class="line">    <span class="comment">#后台数据列表排序方式</span></span><br><span class="line">    list_display_links = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置哪些字段可以点击进入编辑界面</span></span><br></pre></td></tr></table></figure>

<h4 id="view"><a href="#view" class="headerlink" title="view"></a>view</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">xxxView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self,request</span>):</span><br><span class="line">         <span class="comment"># （1）默认数据请求</span></span><br><span class="line">        <span class="comment"># name = request.POST.get(&#x27;username&#x27;)</span></span><br><span class="line">        <span class="comment"># psd = request.POST.get(&#x27;password&#x27;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># （2）JSON数据请求</span></span><br><span class="line">        request_dict = json.loads(request_data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        engine = request_dict.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        prompt = request_dict.get(<span class="string">&#x27;password&#x27;</span>)<span class="comment">#获取对应的值</span></span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> xxx:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;</span><br><span class="line">                <span class="string">&#x27;code&#x27;</span>: <span class="number">404</span>,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;No place now&#x27;</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>:<span class="number">200</span>,</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>:<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>:&#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>:name,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span>:password</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">import</span> xxxModel</span><br><span class="line"><span class="keyword">from</span> apps.xxxmodels <span class="keyword">import</span> xxxModel</span><br><span class="line"></span><br><span class="line">data = serializers.serialize(<span class="string">&quot;json&quot;</span>, xxxModel.objects.<span class="built_in">all</span>()) <span class="comment"># 将django对象转化为json</span></span><br><span class="line">create = xxxModel.objects.create(name=<span class="string">&#x27;xxx&#x27;</span>,password=<span class="string">&#x27;xxx&#x27;</span>) <span class="comment"># 创建</span></span><br><span class="line">filter_one =  xxxModel.objects.<span class="built_in">filter</span>(username=<span class="string">&#x27;xxx&#x27;</span>).first() <span class="comment"># 查找一个</span></span><br><span class="line">filter_all =  xxxModel.objects.<span class="built_in">all</span>() <span class="comment"># 查找所以有</span></span><br><span class="line">delete =  xxxModel.objects.<span class="built_in">filter</span>(username=<span class="string">&#x27;xxx&#x27;</span>).delete() <span class="comment"># 删除</span></span><br><span class="line">update = xxxModel.objects.<span class="built_in">filter</span>(username=<span class="string">&#x27;xxx&#x27;</span>).update(name=<span class="string">&#x27;xxxx&#x27;</span>) <span class="comment"># 修改</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 范围查询</span></span><br><span class="line"><span class="comment"># in:是否包含在范围内</span></span><br><span class="line">xxxModel.objects.<span class="built_in">filter</span>(id__in=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line"><span class="comment"># 查询编号为1或3或5的图书</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gt 大于 (greater then)</span></span><br><span class="line"><span class="comment"># gte 大于等于 (greater then equal)</span></span><br><span class="line"><span class="comment"># lt 小于 (less then)</span></span><br><span class="line"><span class="comment"># lte 小于等于 (less then equal)</span></span><br><span class="line">xxxModel.objects.<span class="built_in">filter</span>(id__gt=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不等于的运算符，使用exclude()过滤器</span></span><br><span class="line">xxxModel.objects.exclude(<span class="built_in">id</span>=<span class="number">3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url:</span><br><span class="line">    path(<span class="string">&#x27;analysis/&#x27;</span>, views.analysis, name=<span class="string">&#x27;analysis&#x27;</span>)</span><br><span class="line">html:</span><br><span class="line">    &lt;a href=<span class="string">&quot;&#123;% url &#x27;analysis&#x27; %&#125;&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line">view:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">analysis</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;analysis.html&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学术研究</category>
      </categories>
      <tags>
        <tag>-templete -Django</tag>
      </tags>
  </entry>
</search>
